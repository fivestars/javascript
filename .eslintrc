// Created from ESLint Starter: https://github.com/DominikSerafin/eslint-starter
// ESLint Docs: http://eslint.org/docs/rules/

{
  //  // https://eslint.org/docs/user-guide/configuring#specifying-parser
  //  "parser": "esprima",
  //
  //  // https://eslint.org/docs/user-guide/configuring#specifying-parser-options
  //  "parserOptions": {
  //    "ecmaVersion": 5,
  //    "sourceType": "script",
  //    "ecmaFeatures": {
  //      "globalReturn": false,
  //      "impliedStrict": false,
  //      "jsx": false,
  //      "experimentalObjectRestSpread": false,
  //    }
  //  },
  //
  //  // https://eslint.org/docs/user-guide/configuring#specifying-environments
    "env": {
      //    "browser": false,                     // browser global variables
      //    "node": false,                        // Node.js global variables and Node.js scoping
      //    "commonjs": false,                    // CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack)
      //    "shared-node-browser": false,         // Globals common to both Node and Browser
      //    "es6": false,                         // enable all ECMAScript 6 features except for modules (this automatically sets the ecmaVersion parser option to 6)
      //    "worker": false,                      // web workers global variables
      "amd": true                                 // defines require() and define() as global variables as per the amd spec
      //    "mocha": false,                       // adds all of the Mocha testing global variables
      //    "jasmine": false,                     // adds all of the Jasmine testing global variables for version 1.3 and 2.0
      //    "jest": false,                        // Jest global variables
      //    "phantomjs": false,                   // PhantomJS global variables
      //    "protractor": false,                  // Protractor global variables
      //    "qunit": false,                       // QUnit globals
      //    "jquery": false,                      // jQuery globals
      //    "prototypejs": false,                 // Prototype.js global variables
      //    "shelljs": false,                     // ShellJS globals
      //    "meteor": false,                      // Meteor globals
      //    "mongo": false,                       // MongoDB globals
      //    "applescript": false,                 // AppleScript global variables
      //    "nashorn": false,                     // Java 8 Nashorn global variables
      //    "serviceworker": false,               // Service Worker global variables
      //    "atomtest": false,                    // Atom test globals
      //    "embertest": false,                   // Ember test globals
      //    "webextensions": false,               // WebExtensions globals
      //    "greasemonkey": false,                // GreaseMonkey globals
    },
  //
  //  // https://eslint.org/docs/user-guide/configuring#specifying-globals
    "globals": {
      "module": false
    },
  //
  //  // https://eslint.org/docs/user-guide/configuring#configuring-plugins
  //  "plugins": [
  //    // e.g. "react" (must run `npm install eslint-plugin-react` first)
  //  ],

  // https://eslint.org/docs/user-guide/configuring#configuring-rules
  // https://eslint.org/docs/rules/
  "rules": {

    ////////// Possible Errors //////////

    "for-direction": 0,                   // enforce “for” loop update clause moving the counter in the right direction.
    "getter-return": 0,                   // enforce return statements in getters
    "no-await-in-loop": 0,                // disallow await inside of loops
    "no-compare-neg-zero": "error",       // disallow comparing against -0
    "no-cond-assign": "error",            // disallow assignment operators in conditional expressions
    "no-console": "error",                // disallow the use of console
    "no-constant-condition": 0,           // disallow constant expressions in conditions
    "no-control-regex": 0,                // disallow control characters in regular expressions
    "no-debugger": "error",               // disallow the use of debugger
    "no-dupe-args": "error",              // disallow duplicate arguments in function definitions
    "no-dupe-keys": "error",              // disallow duplicate keys in object literals
    "no-duplicate-case": "error",         // disallow duplicate case labels
    "no-empty": "error",                  // disallow empty block statements
    "no-empty-character-class": 0,        // disallow empty character classes in regular expressions
    "no-ex-assign": "error",              // disallow reassigning exceptions in catch clauses
    "no-extra-boolean-cast": "error",     // disallow unnecessary boolean casts
    "no-extra-parens": 0,                 // disallow unnecessary parentheses
    "no-extra-semi": "error",             // disallow unnecessary semicolons
    "no-func-assign": "error",            // disallow reassigning function declarations
    "no-inner-declarations": "error",     // disallow variable or function declarations in nested blocks
    "no-invalid-regexp": "error",         // disallow invalid regular expression strings in RegExp constructors
    "no-irregular-whitespace": "error",   // disallow irregular whitespace outside of strings and comments
    "no-obj-calls": 0,                    // disallow calling global object properties as functions
    "no-prototype-builtins": 0,           // disallow calling some Object.prototype methods directly on objects
    "no-regex-spaces": "error",           // disallow multiple spaces in regular expressions
    "no-sparse-arrays": 0,                // disallow sparse arrays
    "no-template-curly-in-string": 0,     // disallow template literal placeholder syntax in regular strings
    "no-unexpected-multiline": "error",   // disallow confusing multiline expressions
    "no-unreachable": "error",            // disallow unreachable code after return, throw, continue, and break statements
    "no-unsafe-finally": "error",         // disallow control flow statements in finally blocks
    "no-unsafe-negation": "error",        // disallow negating the left operand of relational operators
    "use-isnan": "error",                 // require calls to isNaN() when checking for NaN
    "valid-jsdoc": 0,                     // enforce valid JSDoc comments
    "valid-typeof": [                     // enforce comparing typeof expressions against valid strings
      "error", {
        "requireStringLiterals": true
      }
    ],

    ////////// Best Practices //////////

    "accessor-pairs": 0,                  // enforce getter and setter pairs in objects
    "array-callback-return": 0,           // enforce return statements in callbacks of array methods
    "block-scoped-var": "error",          // enforce the use of variables within the scope they are defined
    "class-methods-use-this": 0,          // enforce that class methods utilize this
    "complexity": 0,                      // enforce a maximum cyclomatic complexity allowed in a program
    "consistent-return": 0,               // require return statements to either always or never specify values
    "curly": "error",                     // enforce consistent brace style for all control statements
    "default-case": 0,                    // require default cases in switch statements
    "dot-location":                       // enforce consistent newlines before and after dots
      ["error", "property"],                // newline before the dot
    "dot-notation": [                     // enforce dot notation whenever possible
      "error", {
        "allowPattern":
          "^[a-z]+(_[a-z]+)+$"              // allow snake-case
      }
    ],
    "eqeqeq": "error",                    // require the use of === and !==
    "guard-for-in": 0,                    // require for-in loops to include an if statement
    "no-alert": "error",                  // disallow the use of alert, confirm, and prompt
    "no-caller": "error",                 // disallow the use of arguments.caller or arguments.callee
    "no-case-declarations": 0,            // disallow lexical declarations in case clauses
    "no-div-regex": 0,                    // disallow division operators explicitly at the beginning of regular expressions
    "no-else-return": 0,                  // disallow else blocks after return statements in if statements
    "no-empty-function": 0,               // disallow empty functions
    "no-empty-pattern": 0,                // disallow empty destructuring patterns
    "no-eq-null": 0,                      // disallow null comparisons without type-checking operators
    "no-eval": "error",                   // disallow the use of eval()
    "no-extend-native": 0,                // disallow extending native types
    "no-extra-bind": 0,                   // disallow unnecessary calls to .bind()
    "no-extra-label": 0,                  // disallow unnecessary labels
    "no-fallthrough": "error",            // disallow fallthrough of case statements
    "no-floating-decimal": "error",       // disallow leading or trailing decimal points in numeric literals
    "no-global-assign": 0,                // disallow assignments to native objects or read-only global variables
    "no-implicit-coercion": "error",      // disallow shorthand type conversions
    "no-implicit-globals": 0,             // disallow variable and function declarations in the global scope
    "no-implied-eval": "error",           // disallow the use of eval()-like methods
    "no-invalid-this": "error",           // disallow this keywords outside of classes or class-like objects
    "no-iterator": "error",               // disallow the use of the __iterator__ property
    "no-labels": 0,                       // disallow labeled statements
    "no-lone-blocks": 0,                  // disallow unnecessary nested blocks
    "no-loop-func": "error",              // disallow function declarations and expressions inside loop statements
    "no-magic-numbers": 0,                // disallow magic numbers
    "no-multi-spaces": 0,                 // disallow multiple spaces
    "no-multi-str": "error",              // disallow multiline strings
    "no-new": 0,                          // disallow new operators outside of assignments or comparisons
    "no-new-func": "error",               // disallow new operators with the Function object
    "no-new-wrappers": "error",           // disallow new operators with the String, Number, and Boolean objects
    "no-octal": "error",                  // disallow octal literals
    "no-octal-escape": 0,                 // disallow octal escape sequences in string literals
    "no-param-reassign": "error",         // disallow reassigning function parameters
    "no-proto": 0,                        // disallow the use of the __proto__ property
    "no-redeclare": "error",              // disallow variable redeclaration
    "no-restricted-properties": 0,        // disallow certain properties on certain objects
    "no-return-assign": "error",          // disallow assignment operators in return statements
    "no-return-await": 0,                 // disallow unnecessary return await
    "no-script-url": 0,                   // disallow javascript: urls
    "no-self-assign": "error",            // disallow assignments where both sides are exactly the same
    "no-self-compare": "error",           // disallow comparisons where both sides are exactly the same
    "no-sequences": 0,                    // disallow comma operators
    "no-throw-literal": "error",          // disallow throwing literals as exceptions
    "no-unmodified-loop-condition": 0,    // disallow unmodified loop conditions
    "no-unused-expressions": "error",     // disallow unused expressions
    "no-unused-labels": 0,                // disallow unused labels
    "no-useless-call": "error",           // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": "error",         // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": "error",         // disallow unnecessary escape characters
    "no-useless-return": "error",         // disallow redundant return statements
    "no-void": 0,                         // disallow void operators
    "no-warning-comments": 0,             // disallow specified warning terms in comments
    "no-with": 0,                         // disallow with statements
    "prefer-promise-reject-errors": 0,    // require using Error objects as Promise rejection reasons
    "radix": "error",                     // enforce the consistent use of the radix argument when using parseInt()
    "require-await": 0,                   // disallow async functions which have no await expression
    "vars-on-top": 0,                     // require var declarations be placed at the top of their containing scope
    "wrap-iife": "error",                 // require parentheses around immediate function invocations
    "yoda": "error",                      // require or disallow “Yoda” conditions

    ////////// Strict Mode //////////

    "strict": "error",                    // require or disallow strict mode directives

    ////////// Variables //////////

    "init-declarations":                  // require or disallow initialization in variable declarations
      ["error", "always"],                  // require initialization
    "no-catch-shadow": 0,                 // disallow catch clause parameters from shadowing variables in the outer scope
    "no-delete-var": 0,                   // disallow deleting variables
    "no-label-var": 0,                    // disallow labels that share a name with a variable
    "no-restricted-globals": 0,           // disallow specified global variables
    "no-shadow": 0,                       // disallow variable declarations from shadowing variables declared in the outer scope
    "no-shadow-restricted-names": 0,      // disallow identifiers from shadowing restricted names
    "no-undef": "error",                  // disallow the use of undeclared variables unless mentioned in /*global */ comments
    "no-undef-init": 0,                   // disallow initializing variables to undefined
    "no-undefined": "error",              // disallow the use of undefined as an identifier
    "no-unused-vars": "error",            // disallow unused variables
    "no-use-before-define": ["error", {   // disallow the use of language elements before they are defined
        "functions": true,                  // disallow reference to functions defined later in their scope
        "variables": true                   // disallow reference to variables defined later in their scope
    }],

    ////////// Stylistic Issues //////////

    "array-bracket-newline": 0,            // enforce linebreaks after opening and before closing array brackets
    "array-bracket-spacing":               // enforce consistent spacing inside array brackets
      ["error", "never"],
    "array-element-newline": 0,            // enforce line breaks after each array element
    "block-spacing": "error",              // enforce consistent spacing inside single-line blocks
    "brace-style":                         // enforce consistent brace style for blocks
      ["error", "stroustrup"],
    "camelcase": 0,                        // enforce camelcase naming convention
    "capitalized-comments": 0,             // enforce or disallow capitalization of the first letter of a comment
    "comma-dangle": ["error", "never"],    // require or disallow trailing commas
    "comma-spacing": 0,                    // enforce consistent spacing before and after commas
    "comma-style": ["error", "last"],      // enforce consistent comma style
    "computed-property-spacing": 0,        // enforce consistent spacing inside computed property brackets
    "consistent-this": 0,                  // enforce consistent naming when capturing the current execution context
    "eol-last": "error",                   // require or disallow newline at the end of files
    "func-call-spacing": "error",          // require or disallow spacing between function identifiers and their invocations
    "func-name-matching": "error",         // require function names to match the name of the variable or property to which they are assigned
    "func-names": 0,                       // require or disallow named function expressions
    "func-style": ["error", "expression"], // enforce the consistent use of either function declarations or expressions
    "function-paren-newline": 0,           // enforce consistent line breaks inside function parentheses
    "id-blacklist": 0,                     // disallow specified identifiers
    "id-length": 0,                        // enforce minimum and maximum identifier lengths
    "id-match": 0,                         // require identifiers to match a specified regular expression
    "indent": ["error", 4],                // enforce consistent indentation
    "jsx-quotes": 0,                       // enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": ["error", {             // enforce consistent spacing between keys and values in object literal properties
        "beforeColon": false,
        "afterColon": true,
        "mode": "strict"
    }],
    "keyword-spacing": ["error", {         // enforce consistent spacing before and after keywords
        "before": true,
        "after": true
    }],
    "line-comment-position": 0,            // enforce position of line comments
    "linebreak-style": 0,                  // enforce consistent linebreak style
    "lines-around-comment": 0,             // require empty lines around comments
    "max-depth": 0,                        // enforce a maximum depth that blocks can be nested
    "max-len": ["error", {                 // enforce a maximum line length
        "code": 120,                         // 100-character limit
        "ignoreStrings": true                // let long strings exceed this limit
    }],
    "max-lines": 0,                        // enforce a maximum number of lines per file
    "max-nested-callbacks": 0,             // enforce a maximum depth that callbacks can be nested
    "max-params": 0,                       // enforce a maximum number of parameters in function definitions
    "max-statements": 0,                   // enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": ["error", { // enforce a maximum number of statements allowed per line
      "max": 1
    }],
    "multiline-comment-style":             // enforce multiline comment style
      ["error", "starred-block"],
    "multiline-ternary": 0,                // enforce newlines between operands of ternary expressions
    "new-cap": 0,                          // require constructor names to begin with a capital letter
    "new-parens": 0,                       // require parentheses when invoking a constructor with no arguments
    "newline-per-chained-call": "error",   // require a newline after each call in a method chain
    "no-array-constructor": "error",       // disallow Array constructors
    "no-bitwise": 0,                       // disallow bitwise operators
    "no-continue": 0,                      // disallow continue statements
    "no-inline-comments": 0,               // disallow inline comments after code
    "no-lonely-if": "error",               // disallow if statements as the only statement in else blocks
    "no-mixed-operators": 0,               // disallow mixed binary operators
    "no-mixed-spaces-and-tabs": 0,         // disallow mixed spaces and tabs for indentation
    "no-multi-assign": "error",            // disallow use of chained assignment expressions
    "no-multiple-empty-lines": ["error", { // disallow multiple empty lines
      "max": 1                               // more strict than the default of 2
    }],
    "no-negated-condition": 0,             // disallow negated conditions
    "no-nested-ternary": "error",          // disallow nested ternary expressions
    "no-new-object": "error",              // disallow Object constructors
    "no-plusplus": [                       // disallow the unary operators ++ and --
      "error", {
        "allowForLoopAfterthoughts": true    // have mercy for "for(var i = 0; i < n; i++)"
      }
    ],
    "no-restricted-syntax": [              // disallow specified syntax
      "error",
      "BinaryExpression[operator='in']"      // disallow for..in usage
    ],
    "no-tabs": "error",                    // disallow all tabs
    "no-ternary": 0,                       // disallow ternary operators
    "no-trailing-spaces": "error",         // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0,             // disallow dangling underscores in identifiers
    "no-unneeded-ternary": "error",        // disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property":       // disallow whitespace before properties
      "error",
    "nonblock-statement-body-position": 0, // enforce the location of single-line statements
    "object-curly-newline": ["error", {    // enforce consistent line breaks inside braces
        "consistent": true,
        "minProperties": 2
    }],
    "object-curly-spacing":                // enforce consistent spacing inside braces
      ["error", "always"],
    "object-property-newline": ["error", { // enforce placing object properties on separate lines
        "allowMultiplePropertiesPerLine": false
    }],
    "one-var": ["error", "never"],         // enforce variables to be declared either together or separately in functions
    "one-var-declaration-per-line": 0,     // require or disallow newlines around variable declarations
    "operator-assignment": "error",        // require or disallow assignment operator shorthand where possible
    "operator-linebreak": [                // enforce consistent linebreak style for operators
      "error",
      "before",                              // enforce operators are line prefixes (ie. &&, ||)
      {
        "overrides": {
          "=": "after"                       // you can end a line with the '=' operator
        }
      }
    ],
    "padded-blocks": ["error", "never"],   // require or disallow padding within blocks
    "padding-line-between-statements": [   // require or disallow padding lines between statements
      "error",
      {"blankLine": "always", "prev": "multiline-block-like", "next": "*"},
      {"blankLine": "always", "prev": "*", "next": "return"}
    ],
    "quote-props": [                       // require quotes around object literal property names
      "error",
      "consistent-as-needed"
    ],
    "quotes": ["error", "single"],         // enforce the consistent use of either backticks, double, or single quotes
    "require-jsdoc": 0,                    // require JSDoc comments
    "semi": ["error", "always"],           // require or disallow semicolons instead of ASI
    "semi-spacing": "error",               // enforce consistent spacing before and after semicolons
    "semi-style": ["error", "last"],       // enforce location of semicolons
    "sort-keys": 0,                        // require object keys to be sorted
    "sort-vars": 0,                        // require variables within the same declaration block to be sorted
    "space-before-blocks":                 // enforce consistent spacing before blocks
      ["error", "always"],
    "space-before-function-paren": [       // enforce consistent spacing before function definition opening parenthesis
        "error", {
          "anonymous": "always",             // function () {}
          "named": "never"                   // function foo() {}
        }
      ],
    "space-in-parens": ["error", "never"], // enforce consistent spacing inside parentheses
    "space-infix-ops": "error",            // require spacing around infix operators
    "space-unary-ops": 0,                  // enforce consistent spacing before or after unary operators
    "spaced-comment": ["error", "always"], // enforce consistent spacing after the // or /* in a comment
    "switch-colon-spacing": 0,             // enforce spacing around colons of switch statements
    "template-tag-spacing": 0,             // require or disallow spacing between template tags and their literals
    "unicode-bom": 0,                      // require or disallow Unicode byte order mark (BOM)
    "wrap-regex": 0                        // require parenthesis around regex literals
  }
}
